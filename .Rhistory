    for (other in others) {
      # checking that a median is inside of other range
      ind = ind &
        ((medns[k,2] > medns[medns[,"classe"] == other, 3]) & # comparing with lower bound
           (medns[k,2] < medns[medns[,"classe"] == other, 4]))  # comparing with upper bound
    }
  } # marking choosen predictors for removal
      prefPred[i] <- prefPred[i] | (!ind)
}
prefVec=c(numPred[prefPred], "classe")
workdf=workTrai[ , prefVec]
str(workdf)
library(randomForest)
library(kernlab); library(doParallel)
seed.set=11
cl <- makeCluster(detectCores())
registerDoParallel(cl)
modrf=train(classe~., data=workdf, method="rf")
stopCluster(cl)
registerDoSEQ()
modrf
valddf=valdTrai[, prefVec]
last=length(prefVec)
predictOnVald=predict(modrf, valddf[, -last])
confusionMatrix(valdTrai$classe, predictOnVald)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
modgbm=train(classe~., data=workdf, method="gbm", verbose=F)
stopCluster(cl)
registerDoSEQ()
modgbm
predictOnVald=predict(modgbm, valddf[, -last])
confusionMatrix(valdTrai$classe, predictOnVald)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
modnnet=train(classe~., data=workdf, method="nnet", size=6, decay=.05)
stopCluster(cl)
registerDoSEQ()
modnnet=train(classe~., data=workdf, method="neuralnet", size=6, decay=.05)
modnnet=train(classe~., data=workdf, method="neuralnet", hidden=1)
modnnet=train(classe~., data=workdf, method="neuralnet", hidden=7)
modnnet=train(classe~., data=workdf, method="neuralnet", hidden=11)
?epxpand.grid
modnnet=train(classe~., data=workdf, method="nnet", size=11, decay=.05, maxit=200)
?expand.grid
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5, 6, 7))
modnnet=train(classe~., data=workdf, method="nnet", size=11, decay=.05, maxit=200,tuneGrid = my.grid, trace = F, linout = 1)
warnings()
)
modnnet=train(classe~., data=workdf, method="nnet", decay=.05, maxit=200)
modnnet=train(classe~., data=workdf, method="nnet", maxit=200)
modnnet
predictOnVald=predict(modnnet, valddf[, -last])
confusionMatrix(valdTrai$classe, predictOnVald)
ls()
modlda11
modldai
modpca
modmda
modpcannet
modFit
?avNNet
exit()
quit()
ls()
qplot(workTrai[ ,1: 4], color=classe, data=workTrai, geom="density")
library(ggplot2)
qplot(workTrai[ ,1: 4], color=classe, data=workTrai, geom="density")
qplot(workTrai[ ,1: 4], color=classe, data=workTrai, geom="density")+facet_grid(. ~ classe)
sapply(workTrai[ ,1:4] function(x) qplot(x, color=classe, data=workTrai, geom="density"))
str(mgp)
qplot(roll_belt, color=classe, data=workTrai, geom="density")
qplot(workTrai[, 1], color=classe, data=workTrai, geom="density")
qplot(workTrai[, 2], color=classe, data=workTrai, geom="density")
qplot(workTrai[, 3], color=classe, data=workTrai, geom="density")
qplot(workTrai[, 4], color=classe, data=workTrai, geom="density")
qplot(workTrai[, ], color=classe, data=workTrai, geom="density")
qplot(workTrai[, 5], color=classe, data=workTrai, geom="density")
qplot(workTrai[, 6], color=classe, data=workTrai, geom="density")
str(mgp)
str(mpg)
help(mpg)
modlda=train(classe~., data=workdf, method="lda")
library(caret); library(e1071)
modlda=train(classe~., data=workdf, method="lda")
modlda
ls()
modmda13
modpcannet
quit()
history(100)
library(ggplot2)
qplot(workTrai[, 1], color=classe, data=workTrai, geom="density")
qplot(workTrai[, 1:2], color=classe, data=workTrai, geom="density")+facet_grid(.~.)
qplot(workTrai[, 1:2], color=classe, data=workTrai, geom="density")+facet_wrap(ncol=2)
nms=names(workTrai)
qplot(workTrai[, 1:2], color=classe, data=workTrai, geom="density")+facet_grid(.~nms[1]+nms[2])
qplot(workTrai[, 1:2], color=classe, data=workTrai, geom="density")+facet_wrap(~classe, ncol=2)
p[1]=qplot(workTrai[, 1], color=classe, data=workTrai, geom="density")
p=qplot(workTrai[, 1], color=classe, data=workTrai, geom="density")
class(p)
?vector
?vector
p=as.vector(p)
p
class(p)
qplot(workTrai[, 1], color=classe, data=workTrai, geom="density")
qplot(workTrai[, 2], color=classe, data=workTrai, geom="density")
p[1]
p
p2=qplot(workTrai[, 2], color=classe, data=workTrai, geom="density")
p3=qplot(workTrai[, 3], color=classe, data=workTrai, geom="density")
p4=qplot(workTrai[, 4], color=classe, data=workTrai, geom="density")
p5=qplot(workTrai[, 5], color=classe, data=workTrai, geom="density")
p6=qplot(workTrai[, 6], color=classe, data=workTrai, geom="density")
multiplot(p,p2,p3,p4,p5,p6, col=3)
multiplot(p,p2,p3,p4,p5,p6, cols=3)
install.packages("Rmisc")
multiplot(p,p2,p3,p4,p5,p6, cols=3)
library(Rmisc)
multiplot(p,p2,p3,p4,p5,p6, cols=3)
multiplot(p,p2,p3,p4,p5,p6, cols=2)
library(doSNOW)
library(parallel)
install.packages("doSNOW")
library(doSNOW)
library(parallel)
training<-read.csv(training_URL,na.strings=c("NA",""))
test<-read.csv(test_URL,na.strings=c("NA",""))
training<-training[,7:160]
test<-test[,7:160]
mostly_data<-apply(!is.na(training),2,sum)>19621
training<-training[,mostly_data]
test<-test[,mostly_data]
dim(training)
selCols <- grep("^accel_", names(training));
featurePlot(x = training[,selCols],
            y = training$classe,
            plot = "boxplot");
selCols <- grep("^magnet_", names(training));
featurePlot(x = training[,selCols],
            y = training$classe,
            plot = "boxplot");
selCols <- grep("^gyros_", names(training));
featurePlot(x = training[,selCols],
            y = training$classe,
            plot = "boxplot");
search()
library(caret)
selCols <- grep("^accel_", names(training));
featurePlot(x = training[,selCols],
            y = training$classe,
            plot = "boxplot");
boxplot(training$classe,training[,selCols])
?grep
selCols <- grep("^magnet_", names(training));
featurePlot(x = training[,selCols],
            y = training$classe,
            plot = "boxplot");
selCols <- grep("^gyros_", names(training));
featurePlot(x = training[,selCols],
            y = training$classe,
            plot = "boxplot");
featurePlot(x=training[,c(1:12)], y=training$classe, plot = 'box')
InTrain<-createDataPartition(y=training$classe,p=0.3,list=FALSE)
training1<-training[InTrain,]
history()
history(150)
p3
p3=qplot(workTrai[, 3], color=classe, data=workTrai, geom="density", legend.position=none)
p3=qplot(workTrai[, 3], color=classe, data=workTrai, geom="density", legend.position="none")
p3
?qplot
p3=ggplot(workTrai[, 3], color=classe, data=workTrai, geom="density", legend.position=none)
p2
multiplot(p,p2,p3,p4,p5,p6, cols=2)
ls()
modlds
modlda
modldall
modgbm
modgbm$Accuracy
str(modgbm)
attr(modgbm)
?attr
attr(modgbm,accuracy)
attr(modgbm,Accuracy)
ls()
modgbm
modpcannet
modmda
modFit
rm("modFit")
modmda13
ls()
modpca
training=read.csv("pml-training.csv", stringsAsFactors=F)
testing=read.csv("pml-testing.csv", stringsAsFactors=F)
prVec=sapply(training, is.numeric)
prVec[1:7]=F
trai=training[ , prVec]
trai <- trai[, colSums(is.na(trai)) == 0] 
M=cor(trai)
diag(M)=1
M=abs(M)
M<0.3
which(M < 0.2,arr.ind=T)
which(M < 0.1,arr.ind=T)
which(M < 0.05,arr.ind=T)
length(which(M < 0.05,arr.ind=T))
class((which(M < 0.05,arr.ind=T))
)
smallCor=which(M < 0.05,arr.ind=T)
smallCor[, 1]==1
sum(smallCor[, 1]==1)
which(smallCor[, 1]==1)
update.package("caret")
update.packages("caret")
?featurePlot
trai$classe=as.factor(training$classe)
selCols <- grep("^accel_", names(training));
featurePlot(x = training[,selCols],
            y = training$classe,
            plot = "boxplot");
featurePlot(x = trai[,selCols],
 y = training$classe,
plot = "boxplot");
selCols <- grep("^accel_", names(trai));
featurePlot(x = trai[,selCols],
 y = trai$classe,
plot = "boxplot");
selCols <- grep("^magnet_", names(trai));
history()
featurePlot(x = trai[,selCols],
 y = training$classe,
plot = "boxplot");
featurePlot(x = trai[,selCols],
 y = trai$classe,
plot = "boxplot");
?density
dA=density(trai[classe="A", 1])
dA=density(trai[classe=="A", 1])
dim(dA)
class(dA)
length(dA)
dA
dA=density(trai[classe=="A", 1],kernel="gaussian")
dim(dA)
length(dA)
dA
length(dA$x)
length(dA$y)
max(trai[classe=="A", 1])
min(trai[classe=="A", 1])
min(trai[, 1])
max(trai[, 1])
p1
ls()
p
p2
p3
p4
p5
p6
dA=density(trai[classe=="A", 1],kernel="gaussian",n=500)
length(dA$y)
plot(dA$y,dA$y, type="l")
plot(dA$y,dA$a, type="l")
p1=p
rm("p")
classeDensities=1:6
lower.limit=min(trai[, 1])
upper.limit=max(trai[, 1])
dA=density(trai[classe=="A", 1],kernel="gaussian",n=500, from = lower.limit, to = upper.limit)
plot(dA$y,dA$a, type="l")
sum(dA$y)
dB=density(trai[classe=="B", 1],kernel="gaussian",n=500, from = lower.limit, to = upper.limit)
sum(abs(dA$y-dB$y))
sum((dA$y-dB$y))
p1
dE=density(trai[classe=="E", 1],kernel="gaussian",n=500, from = lower.limit, to = upper.limit)
sum(abs(dA$y-dE$y))
max(abs(dA$y-dE$y))
max(abs(dA$y-dB$y))
max((dA$y-dB$y))
min((dA$y-dB$y))
sum(dB$y)
sum(dE$y)
max(abs(dE$y-dB$y))
max(dA$y)
plot(dA$y,dA$a, type="l")
dA=density(trai[classe=="A", 1],kernel="gaussian",n=1000, from = lower.limit, to = upper.limit)
plot(dA$y,dA$a, type="l")
dA=density(trai[classe=="A", 1],kernel="gaussian",n=2000, from = lower.limit, to = upper.limit)
plot(dA$y,dA$a, type="l")
dA=density(trai[classe=="A", 1],kernel="gaussian",n=5000, from = lower.limit, to = upper.limit)
plot(dA$y,dA$a, type="l")
p2
dA=density(trai[classe=="A", 1],kernel="gaussian",n=5000, from = lower.limit, to = upper.limit)
plot(dA$y,dA$a, type="l")
p1
length(trai[classe=="A", 1])
sum(dA$y)
dB=density(trai[classe=="B", 1],kernel="gaussian",n=1000, from = lower.limit, to = upper.limit)
sum(abs(dA$y-dB$y))
dE=density(trai[classe=="E", 1],kernel="gaussian",n=1000, from = lower.limit, to = upper.limit)
sum(abs(dA$y-dE$y))
sum(dB$y)
sum(dE$y)
dC=density(trai[classe=="C", 1],kernel="gaussian",n=1000, from = lower.limit, to = upper.limit)
sum(dC$y)
plot(dA$y,dA$x, type="l")
plot(dA$x,dA$y, type="l")
plot(dB$x,dB$y, type="l")
plot(dE$x,dE$y, type="l")
plot(dC$x,dC$y, type="l")
densityByClasse <- function(classe, k) {
}
densityByClasse <- function(letter, k) {
den<-density(trai[classe==letter, k],kernel="gaussian",n=1000, from = lower.limit, to = upper.limit)
return den
}
 densityByClasse <- function(letter, k) {
den<-density(trai[classe==letter, k],kernel="gaussian",n=1000, from = lower.limit, to = upper.limit)
return den
 densityByClasse <- function(letter, k) {
den<-density(trai[classe==letter, k],kernel="gaussian",n=1000, from = lower.limit, to = upper.limit)
return(den)
}
lover.limit=min(trai[,2])
upper.limit=max(trai[,2])
dA=densityByClasse("A", 2)
plot(dA$y,dA$x, type="l")
plot(dA$x,dA$y, type="l")
dA
dB=densityByClasse("B", 2)
plot(dB$x,dB$y, type="l")
sum(abs(dA$y-dB$y))
sum(dA$y)
dC=densityByClasse("C", 2)
sum(abs(dA$y-dC$y))
dE=densityByClasse("E", 2)
sum(abs(dA$y-dE$y))
plot(dE$x,dE$y, type="l")
attr(density,y)
attr(dA,y)
?density
lover.limit=min(trai[,4])
upper.limit=max(trai[,4])
dA=densityByClasse("A", 4)
plot(dA$x,dA$y, type="l")
plot(dB$x,dB$y, type="l")
dB=densityByClasse("B", 4)
plot(dB$x,dB$y, type="l")
dC=densityByClasse("C", 4)
plot(dC$x,dC$y, type="l")
dD=densityByClasse("D", 4)
plot(dD$x,dD$y, type="l")
dE=densityByClasse("E", 4)
plot(dE$x,dE$y, type="l")
plot(dE$y)
plot(dD$y, type="l")
sum(dA$y)
sum(abs(dA$y-dB$y))
sum(abs(dA$y-dC$y))
sum(abs(dA$y-dD$y))
sum(abs(dA$y-dE$y))
sum(abs(dB$y-dC$y))
sum(abs(dB$y-dD$y))
sum(abs(dB$y-dE$y))
checkV=min(sum(dA$y),sum(dB$y),sum(dC$y),sum(dD$y),sum(dE$y))
checkV
sum(abs(dC$y-dE$y))
lover.limit
upper.limit
lower.limit=min(trai[,4])
lower.limit
history(100)
dA=densityByClasse("A", 4)
plot(dA$x,dA$y, type="l")
plot(dB$x,dB$y, type="l")
dB=densityByClasse("B", 4)
plot(dB$x,dB$y, type="l")
dC=densityByClasse("C", 4)
plot(dC$x,dC$y, type="l")
dD=densityByClasse("D", 4)
plot(dD$x,dD$y, type="l")
dE=densityByClasse("E", 4)
plot(dE$x,dE$y, type="l")
plot(dA$x,dA$y, type="l")
plot(dB$x,dB$y, type="l")
plot(dC$x,dC$y, type="l")
plot(dD$x,dD$y, type="l")
plot(dE$x,dE$y, type="l")
history(50)
sum(dA$y)
sum(abs(dA$y-dB$y))
sum(abs(dA$y-dC$y))
sum(abs(dA$y-dD$y))
sum(abs(dA$y-dE$y))
sum(abs(dB$y-dC$y))
sum(abs(dB$y-dD$y))
sum(abs(dB$y-dE$y))
checkV=min(sum(dA$y),sum(dB$y),sum(dC$y),sum(dD$y),sum(dE$y))
checkV
sum(dB$y)
plot(dC$x,dC$y, type="l", col=2)
plot(dD$x,dD$y, type="l", col=3)
history(100)
plot(dA$x,dA$y, type="l")
plot(dB$x,dB$y, type="l")
plot(dE$x,dE$y, type="l")
plot(dC$x,dC$y, type="l")
plot(dA$x,dA$y, type="l")
abline(dB$x,dB$y, type="l",col=2)
abline(dB$x,dB$y, col=2)
plot(dB$x,dB$y, type="l")
plot(dA$x,dA$y, type="l")
abline(dB$x,dB$y)
plot(dC$x,dC$y, col=3)
plot(dA$x,dA$y, type="l")
abline(dB$x,dB$y)
abline(dC$x,dC$y, col=3)
?abline
plot(dA$x,dA$y, type="l")
abline(dC$x,dC$y, col=3)
lines(dC$x,dC$y, col=3)
lines(dB$x,dB$y, col=2)
lines(dD$x,dD$y, col=4)
lines(dE$x,dE$y, col=4)
densityByClasse <- function(letter, k) {
  lower.limit=min(trai[classe==letter, k])
  upper.limit=max(trai[classe==letter, k])
den<-density(trai[classe==letter, k],kernel="gaussian",n=1000, from = lower.limit, to = upper.limit)
return(den)
}
da=densityByClasse("A",2)
db=densityByClasse("B",2)
dc=densityByClasse("C",2)
dd=densityByClasse("D",2)
de=densityByClasse("E",2)
plot(da$x,da$y, type="l")
lines(db$x, db$y, col=2)
lines(dc$x, dc$y, col=2)
lines(dc$x, dc$y, col=3)
lines(dd$x, dd$y, col=4)
lines(de$x, de$y, col=5)
letter="A"
k=2
dim(trai)
dim(trai[classe==letter, k])
length(trai[classe==letter, k])
letter="B"
length(trai[classe==letter, k])
densityByClasse <- function(letter, k) {
  lower.limit=min(workTrai[classe==letter, k])
  upper.limit=max(workTrai[classe==letter, k])
den<-density(workTrai[classe==letter, k],kernel="gaussian",n=1000, from = lower.limit, to = upper.limit)
return(den)
}
history()
da=densityByClasse("A",2)
db=densityByClasse("B",2)
dc=densityByClasse("C",2)
dd=densityByClasse("D",2)
de=densityByClasse("E",2)
plot(da$x,da$y, type="l")
lines(db$x, db$y, col=2)
lines(dc$x, dc$y, col=2)
lines(dc$x, dc$y, col=3)
lines(dd$x, dd$y, col=4)
lines(de$x, de$y, col=5)
plot(da$x,da$y, type="l")
lines(db$x, db$y, col=2)
lines(dc$x, dc$y, col=3)
lines(dd$x, dd$y, col=4)
lines(de$x, de$y, col=5)
quit()
plot(da)
lines(db)
lines(dc, col=2)
lines(dd, col=3)
lines(de, col=4)
quit()
ls()
predictOnValdRF=predict(modrf, valddf[, -last])
predictOnValdGBM=predict(modgbm, valddf[, -last])
assebleDF=data.frame(predictOnValdRF,predictOnValdGBM,classe=valddf[, last])
modmda=train(classe~., data=workdf, method="mda", verbose=F)
library(caret)
modmda=train(classe~., data=workdf, method="mda", verbose=F)
modmda
modbag=train(classe~., data=workdf, method="bag", verbose=F)
warnings()
ls()
modlda
modldai
modnnet
modpca
modpcannet
ls()
modrpart=train(classe~., data=workdf, method="rpart")
modrpart
modcombined=train(classe~., method="gam", data=assebleDF)
modcombined
train(classe~., method="rpart", data=assebleDF)
training$new_window[1:20]
training$num_window[1:20]
sum(colSums(is.na(training[,-(1:7)])) !=0)
100*67/152
dim(trai)
quit()
